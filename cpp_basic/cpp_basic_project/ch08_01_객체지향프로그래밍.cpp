/*
순차적 프로그래밍 : 프로그램 코드를 주어진 작업 순서대로 나열한다.
	- 절차적 프로그래밍
구조적 프로그래밍 : 문제에서 수행해야 하는 기능을 작은 단위로 작성하여 구조화된 형태의 프로그램 코드를 작성하는 것
	- 필요한 기능을 하나의 함수로 작성하고 함수를 호출해서 작업하는 방식
	- 함수 내에서는 순차적으로 프로그램이 작성된다.
객체지향 프로그래밍 : 주어진 문제 해결을 객체를 생성하여 객체가 프로그램 코드 실행의 주체가 되게 하는 것
	- 개념과 그 개념을 통해 실체가 생성되고 실체가 움직이는 것으로 인해 프로그램이 실행된다.
	- 실체는 자신을 나타내는 정보와 실행하는 기능을 포함한다.
	- 사람의 실세계를 컴퓨터 언어로 옮겨놓은 형태
	- 클래스 : 실체가 생성되기 위해 필요한 하나의 틀
	- 객체 : 실체, 실제로 존재하는 대상, 프로그램이 실행될 때 주체가 되는 것
*/

/*
[객체지향 프로그래밍]
- 객체를 식별하고 이를 통해 클래스를 정의하는 것이 편리함
- '누가(객체)' 문제를 무엇으로 어떻게 풀어나가는 가


[클래스 정의]
* 문제 분석 -> 객체 식별 -> 해당 객체의 클래스 정의 -> main() 함수에서 객체를 생성하고 입출력 형식에 맞게 자료를 전달하거나 전달받아서 표시
- 객체를 생성하려면 먼저 해당 객체의 클래스가 정의되어 있어야 한다.
- 멤버 : 클래스의 멤버 변수(작업 대상), 클래스의 멤버 함수(약속된 기능)
- 프로그램에서 누가 동작하는 가에 초점을 맞춰 '누가'를 나타낼 때, '누가''무엇'을 가지고 일을 하는가를 식별해야 함
	-> 멤버 변수 ; '무엇'에 해당함, 객체의 속성을 나타냄, 상태를 저장
	-> 멤버 함수 : 어떤 일이 어떻게 처리되는가에 대한 내용, 객체를 동작, 멤버 변수를 이용하여 자료 처리와 같은 동작을 수행함

* 누가 하는가 >>>> 객체
* 무엇이 대상인가, 프로그램 실행에 기억해야 하는 것이 무엇인가 >>>> 멤버 변수
* 어떻게 하는가, 프로그램에 필요한 객체의 동작 >>>> 멤버 함수

*/

/*
[클래스 선언]
class 클래스 이름
{
	클래스 멤버 ;
};

예시 )
class IntSample;
{
	void ShowScore;
	int Score;
};

[객체 생성]
클래스 이름 생성하는 객체 이름;

예시 )
IntSample Obj;
*/

/*
[멤버 접근 속성]
- 별도의 멤버 함수에 대한 정의가 있어야 멤버 함수를 사용할 수 있다.

자료형 클래스이름::멤버 함수 이름(매개변수)
{
	함수 내용;
}

예시 ) 
void IntSample::ShowScore()
{
	cout << "점수 : " << Score << endl;
}

- 함수 내용에서 클래스의 멤버 변수는 별도의 선언이나 매개변수로 전달받지 않고도 사용할 수 있다.
- 같은 클래스 내의 멤버들기리는 자유롭게 접근할 수 있다.


* 멤버 접근 속성
- 클래스 멤버는 멤버 접근 속성이 부여된다.
- 멤버 접근 속성? : 클래스 밖에서 클래스 멤버 변수와 함수에 접근할 수 있는 자격 설정
	- private	: 같은 클래스 멤버만 접근 허용, private이 기본, 멤버 변수와 내부 처리를 할 떄 사용
	- protected : (chapter.상속 참고) 
	- public	: 모든 위치에서 접근 허용, 외부에서 수행할 멤버 함수, 일반적으로 'set'을 붙여서 시작하고, 멤버 변수의 값을 외부에 출력할 떄는 'get'을 붙여 표기한다.
*/